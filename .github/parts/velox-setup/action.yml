name: Velox Setup
description: Checkout velox-testing and Velox repos and resolve Velox commit SHA

inputs:
  repository:
    description: Velox repository
    required: false
    default: facebookincubator/velox
  velox_commit:
    description: Velox commit SHA or branch
    required: false
    default: main
  apply_patches:
    description: Apply patches
    required: false
    default: true

outputs:
  velox_sha:
    description: Resolved Velox commit SHA
    value: ${{ steps.resolve-sha.outputs.velox_sha }}

runs:
  using: composite
  steps:
    - name: Checkout Velox
      uses: actions/checkout@v4
      with:
        repository: ${{ inputs.repository }}
        ref: ${{ inputs.velox_commit }}
        path: velox
    
    - id: resolve-sha
      name: Get Velox commit SHA
      shell: bash
      run: |
        VELOX_REF="${{ inputs.velox_commit }}"
        echo "Input ref: $VELOX_REF"
        
        if [[ "$VELOX_REF" == "main" || "$VELOX_REF" == "master" ]]; then
          cd velox
          ACTUAL_SHA=$(git rev-parse HEAD)
          echo "Resolved SHA for branch '$VELOX_REF': $ACTUAL_SHA"
          echo "VELOX_COMMIT_SHA=$ACTUAL_SHA" >> $GITHUB_ENV
          echo "velox_sha=$ACTUAL_SHA" >> $GITHUB_OUTPUT
        else
          echo "Using provided ref: $VELOX_REF"
          echo "VELOX_COMMIT_SHA=$VELOX_REF" >> $GITHUB_ENV
          echo "velox_sha=$VELOX_REF" >> $GITHUB_OUTPUT
        fi

    - name: Apply patches
      if: ${{ inputs.apply_patches }}
      id: apply_patches
      run: |
        PATCH_DIR="${{ github.workspace }}/velox-testing/patches/velox"
        pushd ${{ github.workspace }}/velox
        if [ -d "$PATCH_DIR" ]; then
          shopt -s nullglob
          patch_files=("$PATCH_DIR"/*.patch)
          shopt -u nullglob
          if [ ${#patch_files[@]} -eq 0 ]; then
            echo "Patches directory exists, but no .patch files found. Skipping."
          else
            echo "Found ${#patch_files[@]} patch(es). Applying..."
            for patch_file in "${patch_files[@]}"; do
              echo "Applying patch: $patch_file"
              if git apply --check "$patch_file"; then
                git apply "$patch_file"
                echo "Patch applied successfully."
              else
                echo "Patch failed to apply: $patch_file"
                exit 1
              fi
            done
          fi
        else
          echo "No patches directory found. Skipping patch application."
        fi
        popd

