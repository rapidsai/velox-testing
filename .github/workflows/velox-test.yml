name: Velox Test

on:
  workflow_dispatch:
    inputs:
      velox_commit:
        description: 'Velox commit SHA or branch'
        required: true
        default: 'main'
      run_tests:
        description: 'Run tests after build'
        type: boolean
        required: false
        default: false
      build_type:
        description: 'CMake build type'
        type: choice
        options:
          - Release
          - Debug
          - RelWithDebInfo
        required: false
        default: 'Release'
      cuda_arch:
        description: 'CUDA architecture (e.g., native, "75;80")'
        type: string
        required: false
        default: 'native'
      build_dir:
        description: 'Build directory name'
        type: string
        required: false
        default: 'build'
        
  workflow_call:
    inputs:
      velox_commit:
        type: string
        required: true
      run_tests:
        type: boolean
        required: false
        default: false
      build_type:
        type: string
        required: false
        default: 'Release'
      cuda_arch:
        type: string
        required: false
        default: 'native'
      build_dir:
        type: string
        required: false
        default: 'build'

jobs:
  build-and-test:
    runs-on: linux-amd64-gpu-l4-latest-1
    env:
      GH_TOKEN: ${{ github.token }}
      CCACHE_DIR: ${{ github.workspace }}/ccache

    steps:
      - name: Checkout this repository for CI scripts
        uses: actions/checkout@v4
        with:
          path: velox-testing

      - name: Checkout Velox
        uses: actions/checkout@v4
        with:
          repository: facebookincubator/velox
          ref: ${{ inputs.velox_commit || github.event.inputs.velox_commit }}
          path: velox
      
      - name: Build Docker Container
        run: docker compose -f velox/docker-compose.yml build adapters-cuda
      
      - name: Restore Compiler Cache
        uses: apache/infrastructure-actions/stash/restore@3354c1565d4b0e335b78a76aedd82153a9e144d4
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ccache-linux-adapters-gcc

      - name: Build and Test Velox with cuDF
        run: |
          # Build command with arguments based on workflow inputs
          BUILD_ARGS=""

          # Add run tests flag if enabled
          if [ "${{ inputs.run_tests || github.event.inputs.run_tests }}" = "true" ]; then
            BUILD_ARGS="$BUILD_ARGS --run-tests"
          fi
          
          # Add build type
          BUILD_TYPE="${{ inputs.build_type || github.event.inputs.build_type || 'Release' }}"
          BUILD_ARGS="$BUILD_ARGS --build-type $BUILD_TYPE"
          
          # Add CUDA architecture
          CUDA_ARCH="${{ inputs.cuda_arch || github.event.inputs.cuda_arch || 'native' }}"
          BUILD_ARGS="$BUILD_ARGS --cuda-arch $CUDA_ARCH"
          
          # Add build directory
          BUILD_DIR="${{ inputs.build_dir || github.event.inputs.build_dir || 'build' }}"
          CONTAINER_BUILD_DIR="/workspace/$BUILD_DIR"
          BUILD_ARGS="$BUILD_ARGS --build-dir $CONTAINER_BUILD_DIR"
          
          echo "Running Velox build inside Docker container..."
          echo "Build args: $BUILD_ARGS"
          
          # Copy CI script into velox directory and run inside container
          cp velox-testing/ci/velox/build-and-test.sh velox/
          chmod +x velox/build-and-test.sh
          
          # Run the build script inside the Docker container with cache and build directory mounted
          mkdir -p "velox/$BUILD_DIR"  # Ensure build directory exists on runner
          docker compose -f velox/docker-compose.yml run --rm \
            -v ${{ env.CCACHE_DIR }}:/ccache \
            -v "$(pwd)/velox/$BUILD_DIR:$CONTAINER_BUILD_DIR" \
            -e CCACHE_DIR=/ccache \
            adapters-cuda bash -c "./build-and-test.sh $BUILD_ARGS"

      - name: Stash Compiler Cache
        uses: apache/infrastructure-actions/stash/save@3354c1565d4b0e335b78a76aedd82153a9e144d4
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ccache-linux-adapters-gcc
