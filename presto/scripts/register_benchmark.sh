#!/bin/bash
set -euo pipefail

# TPC-H Table Registration Script
# Registers TPC-H tables in Presto with configurable location

COORD=localhost:8080
CATALOG=hive
USER=tpch-benchmark
SCHEMA=${SCHEMA:-"tpch_pq_sf1"}
DEFAULT_LOCATION="/data/velox-100"

# Function to run SQL with retries
run_sql() {
    local sql="$1"
    local catalog_header=( -H "X-Presto-Catalog: ${CATALOG}" )
    local schema_header=( -H "X-Presto-Schema: ${2:-default}" )
    local user_header=( -H "X-Presto-User: tpch-admin" )
    local resp
    resp=$(curl -sS -X POST "http://${COORD}/v1/statement" "${catalog_header[@]}" "${schema_header[@]}" "${user_header[@]}" --data "$sql")
    local next_uri
    next_uri=$(printf '%s' "$resp" | sed -n 's/.*"nextUri"\s*:\s*"\([^"]\+\)".*/\1/p')
    local error
    error=$(printf '%s' "$resp" | sed -n 's/.*"message"\s*:\s*"\([^"]\+\)".*/\1/p')
    if [[ -n "$error" && -z "$next_uri" ]]; then
        echo "Query failed: $error" >&2
        return 1
    fi
    while [[ -n "$next_uri" ]]; do
        resp=$(curl -sS "$next_uri")
        next_uri=$(printf '%s' "$resp" | sed -n 's/.*"nextUri"\s*:\s*"\([^"]\+\)".*/\1/p')
        error=$(printf '%s' "$resp" | sed -n 's/.*"message"\s*:\s*"\([^"]\+\)".*/\1/p')
        if [[ -n "$error" ]]; then
            echo "Query failed: $error" >&2
            return 1
        fi
        local state
        state=$(printf '%s' "$resp" | sed -n 's/.*"state"\s*:\s*"\([^"]\+\)".*/\1/p')
        if [[ "$state" == "FINISHED" ]]; then
            return 0
        fi
    done
}

run_sql_with_retries() {
    local sql="$1"
    local schema_ctx="$2"
    local attempts=${3:-30}
    local delay=${4:-2}
    local i
    for ((i=1; i<=attempts; i++)); do
        if run_sql "$sql" "$schema_ctx"; then
            return 0
        fi
        echo "Retry $i/${attempts} after failure. Waiting ${delay}s..."
        sleep "$delay"
    done
    echo "Giving up after ${attempts} attempts running SQL: ${sql}" >&2
    return 1
}

# Function to register TPC-H tables
register_tpch_tables() {
    local location="$1"
    
    echo "Registering TPC-H tables in Presto..."
    echo "Using location: ${location}"
    
    # Wait for Presto coordinator to be ready
    echo -n "Waiting for Presto coordinator at ${COORD} to be ready"
    for i in {1..60}; do
        if curl -sSf "http://${COORD}/v1/info" > /dev/null; then
            echo " - ready"
            break
        fi
        echo -n "."
        sleep 1
        if [[ $i -eq 60 ]]; then
            echo "Presto coordinator not responding at ${COORD}" >&2
            exit 1
        fi
    done
    
    # Create schema
    run_sql_with_retries "create schema if not exists ${CATALOG}.${SCHEMA}" default 60 2
    
    # Drop existing tables if they exist
    for table in lineitem orders customer partsupp part supplier nation region; do
        echo "Dropping table ${table} if exists..."
        run_sql "drop table if exists ${CATALOG}.${SCHEMA}.${table}" > /dev/null 2>&1 || true
    done
    
    # Define table schemas with DOUBLE types
    declare -A TABLE_COLUMNS
    # schema for data generated by velox-100
    TABLE_COLUMNS[region]="r_regionkey bigint, r_name varchar, r_comment varchar"
    TABLE_COLUMNS[nation]="n_nationkey bigint, n_name varchar, n_regionkey bigint, n_comment varchar"
    TABLE_COLUMNS[supplier]="s_suppkey bigint, s_name varchar, s_address varchar, s_nationkey bigint, s_phone varchar, s_acctbal double, s_comment varchar"
    TABLE_COLUMNS[part]="p_partkey bigint, p_name varchar, p_mfgr varchar, p_brand varchar, p_type varchar, p_size integer, p_container varchar, p_retailprice double, p_comment varchar"
    TABLE_COLUMNS[partsupp]="ps_partkey bigint, ps_suppkey bigint, ps_availqty integer, ps_supplycost double, ps_comment varchar"
    TABLE_COLUMNS[customer]="c_custkey bigint, c_name varchar, c_address varchar, c_nationkey bigint, c_phone varchar, c_acctbal double, c_mktsegment varchar, c_comment varchar"
    TABLE_COLUMNS[orders]="o_orderkey bigint, o_custkey bigint, o_orderstatus varchar, o_totalprice double, o_orderdate date, o_orderpriority varchar, o_clerk varchar, o_shippriority integer, o_comment varchar"
    TABLE_COLUMNS[lineitem]="l_orderkey bigint, l_partkey bigint, l_suppkey bigint, l_linenumber integer, l_quantity double, l_extendedprice double, l_discount double, l_tax double, l_returnflag varchar, l_linestatus varchar, l_shipdate date, l_commitdate date, l_receiptdate date, l_shipinstruct varchar, l_shipmode varchar, l_comment varchar"

    # Create external tables
    for tbl in region nation supplier part partsupp customer orders lineitem; do
        local table_location="file:${location}/${tbl}"
        local sql="create table if not exists ${CATALOG}.${SCHEMA}.${tbl} (${TABLE_COLUMNS[$tbl]}) with (format='PARQUET', external_location='${table_location}')"
        echo "Creating ${tbl} from ${table_location}"
        run_sql_with_retries "${sql}" "${SCHEMA}" 60 2
    done
    
    echo "Done registering TPCH external Parquet tables in ${CATALOG}.${SCHEMA}"
}

# Function to clean up TPC-H tables
clean_tpch_tables() {
    echo "Cleaning up TPC-H tables..."
    for table in lineitem orders customer partsupp part supplier nation region; do
        echo "Dropping table ${table}..."
        run_sql "drop table if exists ${CATALOG}.${SCHEMA}.${table}" > /dev/null 2>&1 || true
    done
    echo "Cleanup complete"
}

# Function to show usage
show_usage() {
    cat <<EOF
Usage: $0 <command> [options]

Commands:
  register              Register TPC-H tables in Presto
  clean                 Clean up TPC-H tables

Options:
  -s, --schema NAME    Schema name for TPC-H tables, only underscores allowed (default: tpch_pq_sf1)
  -l, --location PATH  Location path for TPC-H data (default: /data/velox-100)
  -c, --coordinator URL Presto coordinator URL (default: localhost:8080)
  -h, --help          Show this help message

Environment Variables:
  SCHEMA               Schema name for TPC-H tables (default: test-tpch_pq_sf1)
  COORD                Presto coordinator URL (default: localhost:8080)
  CATALOG              Presto catalog (default: hive)

Examples:
  $0 register -l "/data/tpch/sf1"                          # Register with custom location
  $0 register -s "tpch_sf100_parquet" -l "/data/velox-100" # Register with custom schema and location
  $0 register -c "presto-coordinator:8080"                 # Register with custom coordinator
  $0 clean                                                 # Clean up tables

EOF
}

# Parse command line arguments
COMMAND=""
LOCATION="$DEFAULT_LOCATION"

while [[ $# -gt 0 ]]; do
    case $1 in
        register|clean)
            COMMAND="$1"
            shift
            ;;
        -s|--schema)
            SCHEMA="$2"
            shift 2
            ;;
        -l|--location)
            LOCATION="$2"
            shift 2
            ;;
        -c|--coordinator)
            COORD="$2"
            shift 2
            ;;
        -h|--help)
            show_usage
            exit 0
            ;;
        *)
            echo "Unknown option: $1" >&2
            show_usage
            exit 1
            ;;
    esac
done

# Execute command
case $COMMAND in
    register)
        register_tpch_tables "$LOCATION"
        ;;
    clean)
        clean_tpch_tables
        ;;
    "")
        echo "Error: No command specified" >&2
        show_usage
        exit 1
        ;;
    *)
        echo "Error: Unknown command: $COMMAND" >&2
        show_usage
        exit 1
        ;;
esac
